"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1369],{7343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-concepts/api-Integration","title":"API Integration","description":"Fetching and submitting data","source":"@site/docs/core-concepts/api-Integration.md","sourceDirName":"core-concepts","slug":"/core-concepts/api-Integration","permalink":"/dalila-dashboard-documentation/docs/core-concepts/api-Integration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Routing","permalink":"/dalila-dashboard-documentation/docs/core-concepts/routing"},"next":{"title":"Localization","permalink":"/dalila-dashboard-documentation/docs/core-concepts/localization"}}');var r=t(4848),s=t(8453);const o={sidebar_position:2},a="API Integration",d={},c=[{value:"Tooling",id:"tooling",level:2},{value:"API Routes",id:"api-routes",level:2},{value:"Special Cases",id:"special-cases",level:3},{value:"Models",id:"models",level:2},{value:"Services",id:"services",level:2},{value:"Fetching Data",id:"fetching-data",level:2},{value:"Queries",id:"queries",level:3},{value:"Utility Fetch Wrapper",id:"utility-fetch-wrapper",level:3},{value:"Fetching Steps",id:"fetching-steps",level:3},{value:"Submitting Data",id:"submitting-data",level:2},{value:"Mutations",id:"mutations",level:3},{value:"Showing Form Submit Errors",id:"showing-form-submit-errors",level:3},{value:"OpenAPI",id:"openapi",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"api-integration",children:"API Integration"})}),"\n",(0,r.jsx)(n.p,{children:"Fetching and submitting data"}),"\n",(0,r.jsx)(n.h2,{id:"tooling",children:"Tooling"}),"\n",(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://tanstack.com/query/latest",children:"React Query"})," to fetch, update and revalidate the data."]}),"\n",(0,r.jsx)(n.h2,{id:"api-routes",children:"API Routes"}),"\n",(0,r.jsxs)(n.p,{children:["You can find a list of all the API endpoints that we call in our app at ",(0,r.jsx)(n.code,{children:"/src/core/constants/api-routes.ts"})," with each route having its path and method."]}),"\n",(0,r.jsx)(n.h3,{id:"special-cases",children:"Special Cases"}),"\n",(0,r.jsx)(n.admonition,{title:"VisitSaudi Endpoints",type:"warning",children:(0,r.jsx)(n.p,{children:"Not all requests are sent to our backend, but we may request resources from VisitSaudi Directly."})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples on this:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The DMC trips (also known as experiences) used in the informative pages."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In this case we use a ",(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.a,{href:"https://vite.dev/config/server-options#server-proxy",children:"vite proxy"})," in development"]})," to communicate with VisitSaudi endpoints without getting ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS",children:"CORS"})," errors, but ",(0,r.jsx)(n.strong,{children:"in production"})," we need VisitSaudi to add the origin to the allowed list."]}),"\n",(0,r.jsx)(n.h2,{id:"models",children:"Models"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Models are types related to API integration, like response type, request parameters types and form data types."}),"\n",(0,r.jsxs)(n.li,{children:["You can find the models at ",(0,r.jsx)(n.code,{children:"/src/core/openapi/models"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Services are classes to wrap API methods categorized by feature."}),"\n",(0,r.jsxs)(n.li,{children:["You can find the services at ",(0,r.jsx)(n.code,{children:"/src/core/openapi/services"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"fetching-data",children:"Fetching Data"}),"\n",(0,r.jsx)(n.h3,{id:"queries",children:"Queries"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We use React Query's ",(0,r.jsx)(n.code,{children:"useQuery"})," for fetching data."]}),"\n",(0,r.jsxs)(n.li,{children:["You can find the queries categorized by feature at ",(0,r.jsx)(n.code,{children:"/src/core/queries"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"utility-fetch-wrapper",children:"Utility Fetch Wrapper"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When fetching or submitting data we need to handle things like, authentication tokens, unauthorized & unauthenticated requests redirect, language headers and more. That's why we added a utility fetch function that works as a wrapper around the fetch API method."}),"\n",(0,r.jsxs)(n.li,{children:["You can find the fetch utility function in ",(0,r.jsx)(n.code,{children:"/src/core/utils/network.ts"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"fetching-steps",children:"Fetching Steps"}),"\n",(0,r.jsx)(n.p,{children:"To fetch data you need to:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Define the data types in the models folder. The types are defined for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The expected response type."}),"\n",(0,r.jsx)(n.li,{children:"Any query parameters expected to be sent to the endpoint using query params (like filters, pagination, sorting, etc.)."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="src/core/openapi/models/Admin.ts"',children:"export interface Admin {\n   ...\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add the api request path to the ",(0,r.jsx)(n.a,{href:"#api-routes",children:"API_ROUTES"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="src/core/constants/api-routes.ts"',children:' export const API_ROUTES = {\n     getAdmins: {\n     method: "GET",\n     path: `${API_URL}/admins`,\n   }\n }\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add a new method to your service to request the resource using the ",(0,r.jsx)(n.a,{href:"#utility-fetch-wrapper",children:"utility fetch wrapper"})," and pass any query params to the endpoint."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="src/core/openapi/services/AdminsService.ts"',children:'import type {AdminsResponse} from "~/core/openapi/models/Admin";\nimport { fetch } from "~/core/utils/network";\nimport { API_ROUTES } from "~/core/constants/api-routes";\n  \nexport class AdminsService {\n  public static getAdmins() {\n    return fetch(url, {\n      method: API_ROUTES.getAdmins.method,\n    })\n    .then((res) => res as AdminsResponse)\n    .catch((err) => {});\n   }\n }\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Call that method inside your ",(0,r.jsx)(n.a,{href:"#queries",children:"query"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="src/core/queries/admins.ts"',children:' export function useGetAdminsQuery(\n   options?: QueryOptions,\n ): UseQueryResult<AdminsResponse> {\n return useQuery({\n    queryKey: ["admins"],\n    queryFn: () => {\n      return AdminsService.getAdmins(params)\n         .then((res) => res)\n         .catch((err) => {\n          message.error(err.message);\n         });\n    },\n   ...options,\n });\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Call your query hook inside your page or component."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="src/core/pages/admins/index.tsx"',children:"export default function AdminsPage {\n   const {data, error, isFetching} = useGetAdminsQuery();\n\n   return (\n     <main>\n       <h1>Admins List</h1>\n       // Use your data to show the admins list\n     </main>\n  )\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"submitting-data",children:"Submitting Data"}),"\n",(0,r.jsx)(n.h3,{id:"mutations",children:"Mutations"}),"\n",(0,r.jsxs)(n.p,{children:["We use React Query's ",(0,r.jsx)(n.code,{children:"useMutation"})," hook to submit the data and invalidate any stale data using the query key."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="example: RevokeAdminComponent.tsx"',children:'import { useMutation } from "@tanstack/react-query";\nimport { queryClient } from "~/core/providers/query";\nimport { AdminsService } from "~/core/openapi/services/AdminsService";\n\nfunction RevokeAdminComponent(adminId:string) {\n  const { mutate: revokeAdmin } = useMutation({\n    mutationFn: () => {\n      // Call the service method that\'s responsible for the mutation \n      return AdminsService.revokeAdmin(adminId)\n       .then(() => {\n        // Invalidating any fetched data that may be affected with this action\n        queryClient.invalidateQueries({ queryKey: ["admin", adminId] });\n        queryClient.invalidateQueries({ queryKey: ["admins"] });\n        queryClient.invalidateQueries({ queryKey: ["audit-logs"] });\n      })\n       .catch((err) => {\n        message.error(err.message);\n      })\n   },\n });\n\n return <button onClick={revokeAdmin}>Revoke Admin</button>\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"showing-form-submit-errors",children:"Showing Form Submit Errors"}),"\n",(0,r.jsxs)(n.p,{children:["There is a ready to use util method at ",(0,r.jsx)(n.code,{children:"/src/core/utils/form"})," called ",(0,r.jsx)(n.code,{children:"setFormApiErrors"})," used to automatically set the errors returned from the backend to the ",(0,r.jsx)(n.a,{href:"https://ant.design/components/form",children:"antd Form"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="example: AdminForm.tsx"',children:'import { useEffect } from "react";\nimport { Form } from "antd";\nimport { type FormApiError, setFormApiErrors } from "~/core/utils/form";\n\ninterface Props {\n  apiErrors?: FormApiError; // Passed api errors returned from the backend\n}\n\nfunction AdminForm({apiErrors}:Props) {\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    setFormApiErrors(form, apiErrors);\n  }, [apiErrors]);\n\n  return (\n    <Form>\n      // Form inputs\n    </Form>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"openapi",children:"OpenAPI"}),"\n",(0,r.jsx)(n.admonition,{title:"Deprecated",type:"danger",children:(0,r.jsx)(n.p,{children:"OpenAPI is no longer used to generate models and services automatically."})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.openapis.org/",children:"OpenAPI"})," was configured at the early stages of the project to generate models and services automatically."]}),"\n",(0,r.jsx)(n.li,{children:"It was abandoned later on, as we wanted to have more control over the models and services in the project."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);